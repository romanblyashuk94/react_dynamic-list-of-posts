{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","memo","posts","onPostBtnClick","selectedPostId","className","map","id","title","type","cn","onClick","postId","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","Error","Loader","NewCommentForm","onSubmit","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","commentBody","setCommentBody","nameErrorMessage","setNameErrorMessage","emailErrorMessage","setEmailErrorMessage","commentBodyErrorMessage","setCommentBodyErrorMessage","isLoading","setIsLoading","handleFieldChage","event","target","name","value","preventDefault","email","finally","htmlFor","placeholder","onChange","PostDetails","post","postBody","comments","setComments","isCommentWriting","setIsCommentWriting","errorMessage","setErrorMessage","handleCommentDelete","a","currentComments","filter","handleCommentAdd","useCallback","commentData","comment","uploadedComment","prevComments","useEffect","getCommentsByPostId","loadedComments","catch","length","href","UserSelector","selectedUserId","onSelect","onErrorCatch","isOpen","setIsOpen","users","setUsers","loadedUsers","selectetUserName","useMemo","find","user","role","handleSelect","App","setSelectedUserId","setPosts","setSelectedPostId","handleSelectedUserChange","userId","getPostsByUserId","loadedPosts","selectedPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8c75139.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { FC, memo } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[]\n  selectedPostId: number\n  onPostBtnClick: (postId: number) => unknown\n};\n\nexport const PostsList: FC<Props> = memo(({\n  posts, onPostBtnClick, selectedPostId,\n}) => {\n  const handlePostBtnClick = (postId: number) => {\n    if (selectedPostId === postId) {\n      onPostBtnClick(0);\n    } else {\n      onPostBtnClick(postId);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(({ id, title }) => (\n            <tr key={id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPostId !== id },\n                  )}\n                  onClick={() => handlePostBtnClick(id)}\n                >\n                  {selectedPostId === id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getCommentsByPostId = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`).then(response => {\n    if ('error' in response) {\n      throw new Error();\n    }\n\n    return response;\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`).then(response => {\n    if (response !== 1) {\n      throw new Error();\n    }\n\n    return response;\n  });\n};\n\ninterface CommentForUploadd extends CommentData {\n  postId: number\n}\n\nexport const addComment = (comment: CommentForUploadd) => {\n  return client.post<Comment>('/comments', comment)\n    .then(response => {\n      if ('error' in response) {\n        throw new Error();\n      }\n\n      return response;\n    });\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport {\n  FC, ChangeEvent, useState, memo,\n} from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onSubmit: (commentData: CommentData) => Promise<boolean>;\n};\n\nexport const NewCommentForm: FC<Props> = memo(({ onSubmit }) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const [nameErrorMessage, setNameErrorMessage] = useState('');\n  const [emailErrorMessage, setEmailErrorMessage] = useState('');\n  const [commentBodyErrorMessage, setCommentBodyErrorMessage] = useState('');\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFieldChage = (\n    event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setNameErrorMessage('');\n        setAuthorName(value);\n        break;\n\n      case 'email':\n        setEmailErrorMessage('');\n        setAuthorEmail(value);\n        break;\n\n      case 'body':\n        setCommentBodyErrorMessage('');\n        setCommentBody(value);\n        break;\n\n      default:\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!authorName || !authorEmail || !commentBody) {\n      setNameErrorMessage(authorName ? '' : 'Name is required');\n      setEmailErrorMessage(authorEmail ? '' : 'Email is required');\n      setCommentBodyErrorMessage(commentBody ? '' : 'Enter some text');\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    onSubmit({\n      name: authorName,\n      email: authorEmail,\n      body: commentBody,\n    })\n      .then((response) => {\n        if (response) {\n          setCommentBody('');\n        }\n      })\n      . finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const handleReset = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentBody('');\n    setNameErrorMessage('');\n    setEmailErrorMessage('');\n    setCommentBodyErrorMessage('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': nameErrorMessage })}\n            value={authorName}\n            onChange={handleFieldChage}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameErrorMessage && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameErrorMessage && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {nameErrorMessage}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': emailErrorMessage })}\n            value={authorEmail}\n            onChange={handleFieldChage}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailErrorMessage && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailErrorMessage && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {emailErrorMessage}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': commentBodyErrorMessage })}\n            value={commentBody}\n            onChange={handleFieldChage}\n          />\n        </div>\n\n        {commentBodyErrorMessage && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {commentBodyErrorMessage}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button', 'is-link', { 'is-loading': isLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import {\n  FC, memo, useCallback, useEffect, useState,\n} from 'react';\nimport {\n  addComment, deleteComment, getCommentsByPostId,\n} from '../api/comments';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post\n};\n\nexport const PostDetails: FC<Props> = memo(({ post }) => {\n  const { id: postId, title, body: postBody } = post;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentWriting, setIsCommentWriting] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleCommentDelete = async (commentId: number) => {\n    setErrorMessage('');\n\n    const currentComments = comments;\n\n    try {\n      setComments(comments.filter(({ id }) => id !== commentId));\n\n      await deleteComment(commentId);\n    } catch {\n      setErrorMessage(\"Can't delete comment\");\n      setComments(currentComments);\n    }\n  };\n\n  const handleCommentAdd = useCallback(async (commentData: CommentData) => {\n    try {\n      setErrorMessage('');\n\n      const uploadedComment = await addComment({ postId, ...commentData });\n\n      setComments(prevComments => [...prevComments, uploadedComment]);\n\n      return true;\n    } catch (error) {\n      setErrorMessage(\"Can't add comment\");\n\n      return false;\n    }\n  }, []);\n\n  useEffect(() => {\n    setErrorMessage('');\n    setIsCommentWriting(false);\n    setIsLoading(true);\n\n    getCommentsByPostId(postId)\n      .then(loadedComments => {\n        setComments(loadedComments);\n      })\n      .catch(() => {\n        setErrorMessage(\"Can't load comments\");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${postId}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {postBody}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading\n            ? <Loader />\n            : (\n              <>\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {!comments.length && !errorMessage && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n                {comments.length > 0 && (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n\n                    {comments.map(({\n                      id, email, name, body,\n                    }) => (\n                      <article\n                        key={id}\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                      >\n                        <div className=\"message-header\">\n                          <a\n                            href={`mailto:${email}\"`}\n                            data-cy=\"CommentAuthor\"\n                          >\n                            {name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => handleCommentDelete(id)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {body}\n                        </div>\n                      </article>\n                    ))}\n                  </>\n                )}\n\n                {!isCommentWriting && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setIsCommentWriting(true)}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )}\n\n        </div>\n\n        {isCommentWriting && <NewCommentForm onSubmit={handleCommentAdd} />}\n      </div>\n    </div>\n  );\n});\n","import {\n  FC, memo, useEffect, useMemo, useState,\n} from 'react';\nimport { getAllUsers } from '../api/users';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedUserId: number,\n  onSelect: (id: number) => unknown\n  onErrorCatch: (message: string) => unknown\n\n};\n\nexport const UserSelector: FC<Props> = memo(({\n  selectedUserId, onSelect, onErrorCatch,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const handleSelect = (id: number) => {\n    if (selectedUserId !== id) {\n      onSelect(id);\n    }\n\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    getAllUsers()\n      .then(loadedUsers => {\n        setUsers(loadedUsers);\n      })\n      .catch(() => {\n        onErrorCatch(\"Can't load users\");\n      });\n  }, []);\n\n  const selectetUserName = useMemo(() => {\n    return users\n      .find(user => user.id === selectedUserId)?.name ?? 'Choose a user';\n  }, [selectedUserId]);\n\n  return (\n    <div data-cy=\"UserSelector\" className=\"dropdown is-active\">\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          <span>{selectetUserName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(({ id, name }) => (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className=\"dropdown-item\"\n                onClick={() => handleSelect(id)}\n              >\n                {name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users').then(response => {\n    if ('error' in response) {\n      throw new Error();\n    }\n\n    return response;\n  });\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getPostsByUserId } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleSelectedUserChange = useCallback((userId: number) => {\n    setErrorMessage('');\n    setSelectedUserId(userId);\n    setIsLoading(true);\n\n    getPostsByUserId(userId)\n      .then(loadedPosts => {\n        setPosts(loadedPosts);\n      })\n      .catch(() => setErrorMessage(\"Can't load todos\"))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const selectedPost = useMemo(() => (\n    posts.find(post => post.id === selectedPostId) ?? null\n  ), [selectedPostId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUserId={selectedUserId}\n                  onSelect={handleSelectedUserChange}\n                  onErrorCatch={setErrorMessage}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {selectedUserId !== 0 && posts.length === 0 && !isLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    onPostBtnClick={setSelectedPostId}\n                    selectedPostId={selectedPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId !== 0 },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  post={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`).then(response => {\n    if ('error' in response) {\n      throw new Error();\n    }\n\n    return response;\n  });\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}